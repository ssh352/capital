<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bazinga.capital.dao.UserInfoDAO">

    <resultMap id="BaseResultMap" type="com.bazinga.capital.model.UserInfo">
        <id column="id" jdbcType="INTEGER"  property="id" />
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="id_card" jdbcType="VARCHAR" property="idCard"/>
        <result column="sex" jdbcType="TINYINT" property="sex"/>
        <result column="birthday" jdbcType="DATE" property="birthday"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="creator" jdbcType="VARCHAR" property="creator"/>
        <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime"/>
        <result column="modifier" jdbcType="VARCHAR" property="modifier"/>
        <result column="is_deleted" jdbcType="INTEGER" property="isDeleted"/>
    </resultMap>

    <!-- 字段列表 -->
    <sql id="Base_Column_List">
        id,
            name,
            id_card,
            sex,
            birthday,
            status,
            create_time,
            creator,
            modify_time,
            modifier,
            is_deleted
        </sql>

    <!-- 根据主键查询 -->
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from user_info
        where id = #{id}
    </select>

    <select id="selectByIdCard" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from user_info
        where id_card = #{idCard} limit 1
    </select>

    <update id="updateByIdCard" parameterType="com.bazinga.capital.model.UserInfo">
        update user_info
        <set>
        <if test="name != null">
            name = #{name, jdbcType=VARCHAR},
        </if>
        <if test="sex != null">
            sex = #{sex, jdbcType=TINYINT},
        </if>
        <if test="birthday != null">
            birthday = #{birthday, jdbcType=DATE},
        </if>
        <if test="status != null">
            status = #{status, jdbcType=TINYINT},
        </if>
        <if test="createTime != null">
            create_time = #{createTime, jdbcType=TIMESTAMP},
        </if>
        <if test="creator != null">
            creator = #{creator, jdbcType=VARCHAR},
        </if>
        <if test="modifyTime != null">
            modify_time = #{modifyTime, jdbcType=TIMESTAMP},
        </if>
        <if test="modifier != null">
            modifier = #{modifier, jdbcType=VARCHAR},
        </if>
        <if test="isDeleted != null">
            is_deleted = #{isDeleted, jdbcType=INTEGER},
        </if>
        </set>
        where id_card = #{idCard} limit 1
    </update>
    <!-- 新增一条记录 -->
    <insert id="insert" parameterType="com.bazinga.capital.model.UserInfo" useGeneratedKeys="true" keyProperty="id">
        insert into user_info (<include refid="Base_Column_List" />)
        values(
        #{id, jdbcType=INTEGER},
            #{name, jdbcType=VARCHAR},
            #{idCard, jdbcType=VARCHAR},
            #{sex, jdbcType=TINYINT},
            #{birthday, jdbcType=DATE},
            #{status, jdbcType=TINYINT},
            #{createTime, jdbcType=TIMESTAMP},
            #{creator, jdbcType=VARCHAR},
            #{modifyTime, jdbcType=TIMESTAMP},
            #{modifier, jdbcType=VARCHAR},
            #{isDeleted, jdbcType=INTEGER}
            )
    </insert>

    <!-- 根据主键更新数据 -->
    <update id="updateByPrimaryKeySelective" parameterType="com.bazinga.capital.model.UserInfo">
        update user_info
        <set>
            <if test="name != null">
                name = #{name, jdbcType=VARCHAR},
            </if>
            <if test="idCard != null">
                id_card = #{idCard, jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex, jdbcType=TINYINT},
            </if>
            <if test="birthday != null">
                birthday = #{birthday, jdbcType=DATE},
            </if>
            <if test="status != null">
                status = #{status, jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime, jdbcType=TIMESTAMP},
            </if>
            <if test="creator != null">
                creator = #{creator, jdbcType=VARCHAR},
            </if>
            <if test="modifyTime != null">
                modify_time = #{modifyTime, jdbcType=TIMESTAMP},
            </if>
            <if test="modifier != null">
                modifier = #{modifier, jdbcType=VARCHAR},
            </if>
            <if test="isDeleted != null">
                is_deleted = #{isDeleted, jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id} limit 1
    </update>

    <!-- 等值查询条件 -->
    <sql id="Equal_Where_List">
        <if test="name != null">
            and name = #{name, jdbcType=VARCHAR}
        </if>
        <if test="idCard != null">
            and id_card = #{idCard, jdbcType=VARCHAR}
        </if>
        <if test="sex != null">
            and sex = #{sex, jdbcType=TINYINT}
        </if>
        <if test="status != null">
            and status = #{status, jdbcType=TINYINT}
        </if>
        <if test="creator != null">
            and creator = #{creator, jdbcType=VARCHAR}
        </if>
        <if test="modifier != null">
            and modifier = #{modifier, jdbcType=VARCHAR}
        </if>
        <if test="isDeleted != null">
            and is_deleted = #{isDeleted, jdbcType=INTEGER}
        </if>
    </sql>

    <!-- 范围查询条件，包括 <、 >、between、like、in等 -->
    <sql id="Range_Where_List">
        <if test="birthdayFrom != null">
            <![CDATA[
            and birthday >= #{birthdayFrom, jdbcType=DATE}
            ]]>
        </if>
        <if test="birthdayTo != null">
            <![CDATA[
            and birthday <= #{birthdayTo, jdbcType=DATE}
            ]]>
        </if>
        <if test="createTimeFrom != null">
            <![CDATA[
            and create_time >= #{createTimeFrom, jdbcType=TIMESTAMP}
            ]]>
        </if>
        <if test="createTimeTo != null">
            <![CDATA[
            and create_time <= #{createTimeTo, jdbcType=TIMESTAMP}
            ]]>
        </if>
        <if test="modifyTimeFrom != null">
            <![CDATA[
            and modify_time >= #{modifyTimeFrom, jdbcType=TIMESTAMP}
            ]]>
        </if>
        <if test="modifyTimeTo != null">
            <![CDATA[
            and modify_time <= #{modifyTimeTo, jdbcType=TIMESTAMP}
            ]]>
        </if>
    </sql>

    <!-- 上次查询Id最大值 -->
    <sql id="GtLastMaxId_Where">
        <if test="lastMaxId != null and lastMaxId > 0">
            and id > #{lastMaxId}
        </if>
    </sql>

     <!-- 排序条件 -->
    <sql id="Order_By">
        <if test="sorts != null and sorts.size > 0">
            ORDER BY
            <foreach collection="sorts" item="sortItem" separator=",">
                ${sortItem.column} ${sortItem.type.message}
            </foreach>
        </if>
    </sql>

    <!-- 根据查询参数查询数据 -->
    <select id="selectByCondition" parameterType="com.bazinga.capital.query.UserInfoQuery" resultMap="BaseResultMap">
        select
            <include refid="Base_Column_List"/>
        from user_info
        <where>
            <include refid="Equal_Where_List"/>
            <include refid="Range_Where_List"/>
            <include refid="GtLastMaxId_Where" />
        </where>
        <include refid="Order_By"/>
        <if test="limit > 0">
            limit #{offset}, #{limit}
        </if>
    </select>

    <!-- 根据查询参数查询数据总量 -->
    <select id="countByCondition" parameterType="com.bazinga.capital.query.UserInfoQuery" resultType="java.lang.Integer">
        select count(1)
        from user_info
        <where>
            <include refid="Equal_Where_List"/>
            <include refid="Range_Where_List"/>
        </where>
    </select>


</mapper>